import os
import gradio as gr
from utils import db_utils as dbu
from utils import face_utils as fu, voice_utils as vu, signature_utils as su, log_utils as lu

# ------- –§–£–ù–ö–¶–ò–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò -------

def register_face(name, gender, birth_date, consent, image_file):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–∏—Ü—É:
    - –ø–æ–ª—É—á–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä —á–µ—Ä–µ–∑ fu.get_face_vector
    - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–µ–∫—Ç–æ—Ä –≤ –ë–î
    """
    if not all([name, gender, birth_date, consent, image_file]):
        return "–û—à–∏–±–∫–∞: –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    tmp_path = "tmp_face.png"
    with open(tmp_path, "wb") as f:
        f.write(image_file.read())
    # –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞
    vector = fu.get_face_vector(tmp_path)
    if vector is None:
        os.remove(tmp_path)
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–µ–∫—Ç–æ—Ä –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞
    sample_id = dbu.register_user(name, gender, birth_date.strftime("%Y-%m-%d"), True, tmp_path, "face")
    success = dbu.save_face_vector(sample_id, vector)
    os.remove(tmp_path)
    return "–õ–∏—Ü–æ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ!" if success else "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–µ–∫—Ç–æ—Ä–∞."

def register_voice(name, gender, birth_date, consent, audio_file):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≥–æ–ª–æ—Å—É:
    - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ), –ø–æ–ª—É—á–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä —á–µ—Ä–µ–∑ vu.extract_audio_vector
    - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–µ–∫—Ç–æ—Ä –≤ –ë–î
    """
    if not all([name, gender, birth_date, consent, audio_file]):
        return "–û—à–∏–±–∫–∞: –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ."
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (Gradio –¥–∞—ë—Ç file-like –æ–±—ä–µ–∫—Ç)
    tmp_path = "tmp_audio.ogg"
    with open(tmp_path, "wb") as f:
        f.write(audio_file.read())
    # –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞
    vector = vu.extract_audio_vector(tmp_path)
    if vector is None:
        os.remove(tmp_path)
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–µ–∫—Ç–æ—Ä –∏–∑ –∞—É–¥–∏–æ."
    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞
    sample_id = dbu.register_user(name, gender, birth_date.strftime("%Y-%m-%d"), True, tmp_path, "voice")
    success = dbu.save_voice_vector(sample_id, vector)
    os.remove(tmp_path)
    return "–ì–æ–ª–æ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!" if success else "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–µ–∫—Ç–æ—Ä–∞."

def register_signature(name, gender, birth_date, consent, sig_file):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ø–æ–¥–ø–∏—Å–∏:
    - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π PNG, –ø–æ–ª—É—á–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä —á–µ—Ä–µ–∑ su.extract_signature_vector
    - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–µ–∫—Ç–æ—Ä –≤ –ë–î
    """
    if not all([name, gender, birth_date, consent, sig_file]):
        return "–û—à–∏–±–∫–∞: –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å."
    tmp_path = "tmp_sign.png"
    with open(tmp_path, "wb") as f:
        f.write(sig_file.read())
    # –∏–∑–≤–ª–µ–∫–∞–µ–º –≤–µ–∫—Ç–æ—Ä –ø–æ–¥–ø–∏—Å–∏
    vector = su.extract_signature_vector(tmp_path)
    if vector is None:
        os.remove(tmp_path)
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–µ–∫—Ç–æ—Ä –∏–∑ –ø–æ–¥–ø–∏—Å–∏."
    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    sample_id = dbu.register_user(name, gender, birth_date.strftime("%Y-%m-%d"), True, tmp_path, "signature")
    success = dbu.save_signature_vector(sample_id, vector)
    os.remove(tmp_path)
    return "–ü–æ–¥–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!" if success else "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–µ–∫—Ç–æ—Ä–∞."

# ------- –§–£–ù–ö–¶–ò–ò –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò -------

def login_face(image_file):
    """
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ª–∏—Ü—É:
    - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –ø–æ–ª—É—á–∞–µ–º –≤–µ–∫—Ç–æ—Ä
    - –≤—ã–∑—ã–≤–∞–µ–º dbu.recognize_face, –≤—ã–≤–æ–¥–∏–º —Ç–æ–ø-5 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    """
    if not image_file:
        return "–û—à–∏–±–∫–∞: –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞."
    tmp_path = "tmp_face_login.png"
    with open(tmp_path, "wb") as f:
        f.write(image_file.read())
    vector = fu.get_face_vector(tmp_path)
    os.remove(tmp_path)
    if vector is None:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–µ–∫—Ç–æ—Ä –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
    matches = dbu.recognize_face(vector)
    if not matches:
        return "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ."
    result = []
    for name, sim in matches:
        result.append(f"{name} ‚Äî —Å—Ö–æ–¥—Å—Ç–≤–æ: {round((1 - sim) * 100, 2)}%")
    return "\n".join(result)

def login_voice(audio_file):
    """
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –≥–æ–ª–æ—Å—É:
    - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –ø–æ–ª—É—á–∞–µ–º –≤–µ–∫—Ç–æ—Ä
    - –≤—ã–∑—ã–≤–∞–µ–º dbu.recognize_voice, –≤—ã–≤–æ–¥–∏–º —Ç–æ–ø-5 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    """
    if not audio_file:
        return "–û—à–∏–±–∫–∞: –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª."
    tmp_path = "tmp_audio_login.ogg"
    with open(tmp_path, "wb") as f:
        f.write(audio_file.read())
    vector = vu.extract_audio_vector(tmp_path)
    os.remove(tmp_path)
    if vector is None:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–µ–∫—Ç–æ—Ä –∏–∑ –∞—É–¥–∏–æ."
    matches = dbu.recognize_voice(vector)
    if not matches:
        return "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ."
    result = []
    for name, sim in matches:
        result.append(f"{name} ‚Äî —Å—Ö–æ–¥—Å—Ç–≤–æ: {round((1 - sim) * 100, 2)}%")
    return "\n".join(result)

def login_signature(sig_file):
    """
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –ø–æ–¥–ø–∏—Å–∏:
    - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –ø–æ–ª—É—á–∞–µ–º –≤–µ–∫—Ç–æ—Ä
    - –≤—ã–∑—ã–≤–∞–µ–º dbu.recognize_signature, –≤—ã–≤–æ–¥–∏–º —Ç–æ–ø-5 —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    """
    if not sig_file:
        return "–û—à–∏–±–∫–∞: –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é."
    tmp_path = "tmp_sign_login.png"
    with open(tmp_path, "wb") as f:
        f.write(sig_file.read())
    vector = su.extract_signature_vector(tmp_path)
    os.remove(tmp_path)
    if vector is None:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–µ–∫—Ç–æ—Ä –∏–∑ –ø–æ–¥–ø–∏—Å–∏."
    matches = dbu.recognize_signature(vector)
    if not matches:
        return "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ."
    result = []
    for name, sim in matches:
        result.append(f"{name} ‚Äî —Å—Ö–æ–¥—Å—Ç–≤–æ: {round((1 - sim) * 100, 2)}%")
    return "\n".join(result)

# ------- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –õ–û–ì–û–í -------

def show_logs(filter_table=None, filter_user=None):
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä audit_logs:
    - –µ—Å–ª–∏ filter_table –∑–∞–¥–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ —Ç–∞–±–ª–∏—Ü–µ
    - –µ—Å–ª–∏ filter_user –∑–∞–¥–∞–Ω (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è), –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    - –∏–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ –ª–æ–≥–∏
    """
    logs = []
    if filter_table:
        logs = lu.filter_logs_by_table(filter_table)
    elif filter_user:
        logs = lu.filter_logs_by_user(filter_user)
    else:
        logs = lu.fetch_all_logs()

    if not logs:
        return "–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    lines = []
    for log in logs:
        log_id, table_name, operation, old_data, new_data, changed_at, changed_by = log
        lines.append(f"ID: {log_id}; –¢–∞–±–ª–∏—Ü–∞: {table_name}; –û–ø–µ—Ä–∞—Ü–∏—è: {operation}; –î–∞—Ç–∞: {changed_at}; –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {changed_by}\n")
    return "\n".join(lines)

# ------- –°–û–ó–î–ê–Å–ú Gradio-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å -------

with gr.Blocks() as demo:
    gr.Markdown("# üîê –ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è / –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")

    with gr.Tab("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ª–∏—Ü–∞"):
        name_face = gr.Textbox(label="–ü–æ–ª–Ω–æ–µ –∏–º—è")
        gender_face = gr.Radio(["M", "F"], label="–ü–æ–ª")
        bdate_face = gr.Textbox(label="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î)")
        consent_face = gr.Checkbox(label="–î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö")
        img_face = gr.File(label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ (jpg/png)", file_types=[".jpg", ".jpeg", ".png"])
        btn_reg_face = gr.Button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å")
        out_reg_face = gr.Textbox(label="–†–µ–∑—É–ª—å—Ç–∞—Ç")
        btn_reg_face.click(
            fn=register_face,
            inputs=[name_face, gender_face, bdate_face, consent_face, img_face],
            outputs=out_reg_face
        )

    with gr.Tab("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞"):
        name_voice = gr.Textbox(label="–ü–æ–ª–Ω–æ–µ –∏–º—è")
        gender_voice = gr.Radio(["M", "F"], label="–ü–æ–ª")
        bdate_voice = gr.Textbox(label="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î)")
        consent_voice = gr.Checkbox(label="–î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö")
        audio_voice = gr.File(label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ (wav/ogg/mp3)", file_types=[".wav", ".ogg", ".mp3"])
        btn_reg_voice = gr.Button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å")
        out_reg_voice = gr.Textbox(label="–†–µ–∑—É–ª—å—Ç–∞—Ç")
        btn_reg_voice.click(
            fn=register_voice,
            inputs=[name_voice, gender_voice, bdate_voice, consent_voice, audio_voice],
            outputs=out_reg_voice
        )

    with gr.Tab("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏"):
        name_sign = gr.Textbox(label="–ü–æ–ª–Ω–æ–µ –∏–º—è")
        gender_sign = gr.Radio(["M", "F"], label="–ü–æ–ª")
        bdate_sign = gr.Textbox(label="–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î)")
        consent_sign = gr.Checkbox(label="–î–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö")
        img_sign = gr.File(label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ (jpg/png)", file_types=[".jpg", ".jpeg", ".png"])
        btn_reg_sign = gr.Button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å")
        out_reg_sign = gr.Textbox(label="–†–µ–∑—É–ª—å—Ç–∞—Ç")
        btn_reg_sign.click(
            fn=register_signature,
            inputs=[name_sign, gender_sign, bdate_sign, consent_sign, img_sign],
            outputs=out_reg_sign
        )

    with gr.Tab("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–∏—Ü–∞"):
        img_face_log = gr.File(label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ (jpg/png)", file_types=[".jpg", ".jpeg", ".png"])
        btn_log_face = gr.Button("–í–æ–π—Ç–∏")
        out_log_face = gr.Textbox(label="–†–µ–∑—É–ª—å—Ç–∞—Ç")
        btn_log_face.click(
            fn=login_face,
            inputs=[img_face_log],
            outputs=out_log_face
        )

    with gr.Tab("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≥–æ–ª–æ—Å–∞"):
        audio_voice_log = gr.File(label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ (wav/ogg/mp3)", file_types=[".wav", ".ogg", ".mp3"])
        btn_log_voice = gr.Button("–í–æ–π—Ç–∏")
        out_log_voice = gr.Textbox(label="–†–µ–∑—É–ª—å—Ç–∞—Ç")
        btn_log_voice.click(
            fn=login_voice,
            inputs=[audio_voice_log],
            outputs=out_log_voice
        )

    with gr.Tab("–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏"):
        img_sign_log = gr.File(label="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ (jpg/png)", file_types=[".jpg", ".jpeg", ".png"])
        btn_log_sign = gr.Button("–í–æ–π—Ç–∏")
        out_log_sign = gr.Textbox(label="–†–µ–∑—É–ª—å—Ç–∞—Ç")
        btn_log_sign.click(
            fn=login_signature,
            inputs=[img_sign_log],
            outputs=out_log_sign
        )

    with gr.Tab("–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"):
        table_filter = gr.Textbox(label="–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∞–±–ª–∏—Ü–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        user_filter = gr.Textbox(label="–§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∏–º—è, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        btn_show_logs = gr.Button("–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏")
        out_logs = gr.Textbox(label="–õ–æ–≥–∏")
        btn_show_logs.click(
            fn=show_logs,
            inputs=[table_filter, user_filter],
            outputs=out_logs
        )

demo.launch()
