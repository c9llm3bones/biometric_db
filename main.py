import os
from datetime import datetime
from utils import db_utils as dbu
from utils import log_utils as lu
from utils import voice_utils as vu
from utils import signature_utils as su
from utils import face_utils as fu
from utils.config import BIOMETRIC_CONFIG
from utils.indexer import update_index
import time
import json

def clear_screen():
    #os.system('cls' if os.name == 'nt' else 'clear')
    pass

def input_with_prompt(prompt):
    return input(f"{prompt}: ").strip()

def view_audit_logs():
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ –∞—É–¥–∏—Ç-–ª–æ–≥–æ–≤"""
    while True:
        print("\n=== –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –∞—É–¥–∏—Ç–∞ ===\n")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ª–æ–≥–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100)")
        print("2. –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∞–±–ª–∏—Ü–µ")
        print("3. –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        print("4. –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ")
        print("5. –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ CSV")
        print("6. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        print("7. –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º")
        print("8. –ù–∞–∑–∞–¥\n")
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-8): ").strip()

        if choice == '1':
            logs = lu.fetch_all_logs()
            print_audit_logs(logs)
            
        elif choice == '2':
            table = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã: ")
            logs = lu.filter_logs_by_table(table_name=table)
            print_audit_logs(logs)
            
        elif choice == '3':
            user = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
            logs = lu.filter_logs_by_user(user=user)
            print_audit_logs(logs)
            
        elif choice == '4':
            start = input("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD): ")
            end = input("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ (YYYY-MM-DD): ")
            logs = lu.filter_logs_by_date(start_date=start, end_date=end)
            print_audit_logs(logs)
            
        elif choice == '5':
            logs = lu.fetch_all_logs()
            lu.export_logs_to_csv(logs)
            
        elif choice == '6':
            stats = lu.analyze_user_activity()
            print("\n–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
            for row in stats.get('user_stats', []):
                print(f"{row['changed_by']}: {row['changes_count']} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                
        elif choice == '7':
            stats = lu.analyze_table_changes()
            print("\n–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º:")
            for row in stats.get('table_stats', []):
                print(f"{row['table_name']}: {row['changes_count']} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                
        elif choice == '8':
            return
            
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

def print_audit_logs(logs):
    if not logs:
        print("\n‚ö†Ô∏è –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return

    print("\nüìú –õ–æ–≥–∏ –∞—É–¥–∏—Ç–∞:")
    for log in logs:
        print("=" * 80)
        print(f"ID: {log[0]}")          # log_id
        print(f"–î–∞—Ç–∞: {log[1]}")         # timestamp
        print(f"–¢–∞–±–ª–∏—Ü–∞: {log[2]}")      # table_name
        print(f"–û–ø–µ—Ä–∞—Ü–∏—è: {log[3]}")     # operation
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {log[9]}") # changed_by

        if log[4]:  # subject_id
            print(f"Subject ID: {log[4]}")
        if log[5]:  # sensor_id
            print(f"Sensor ID: {log[5]}")
        if log[6]:  # sample_id
            print(f"Sample ID: {log[6]}")

        print("-" * 40)
        print("–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print(json.dumps(log[7], indent=2, ensure_ascii=False) if log[7] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")  # old_data
        print("-" * 40)
        print("–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:")
        print(json.dumps(log[8], indent=2, ensure_ascii=False) if log[8] else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")  # new_data
        print("=" * 80)

def register_biometric(biometric_type, extract_func, save_func, sensor_type='camera', subject_id=None):
    #clear_screen()
    config = BIOMETRIC_CONFIG[biometric_type]
    print(f"=== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ({biometric_type}) ===\n")
    if subject_id is None:
        full_name = input_with_prompt("–í–≤–µ–¥–∏—Ç–µ –∏–º—è")
        gender = input_with_prompt("–ü–æ–ª (M/F)").upper()
        login = input_with_prompt("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω")
        password = input_with_prompt("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
    file_path = input_with_prompt(f"–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É ({biometric_type})")

    if not os.path.exists(file_path):
        print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
    if biometric_type == 'face' and not file_path.lower().endswith(('.jpg', '.jpeg', '.png')):
        print("–õ–∏—Ü–æ: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ‚Äî JPG, JPEG, PNG")
        return
    elif biometric_type == 'voice' and not file_path.lower().endswith(('.wav', '.ogg', '.mp3')):
        print("–ì–æ–ª–æ—Å: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ‚Äî WAV, OGG, MP3")
        return
    elif biometric_type == 'signature' and not file_path.lower().endswith(('.jpg', '.jpeg', '.png')):
        print("–ü–æ–¥–ø–∏—Å—å: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ‚Äî JPG, JPEG, PNG")
        return

    print("\n–û–±—Ä–∞–±–æ—Ç–∫–∞...")


    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞
    vector = extract_func(file_path)

    if vector is None or len(vector) == 0:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–µ–∫—Ç–æ—Ä –∏–∑ {biometric_type}")
        return
    print("–í–µ–∫—Ç–æ—Ä –∏–∑–≤–ª–µ—á—ë–Ω")
    #/home/kostya/biometric_course_work/dataset/faces/Authorize/Ira2.jpg
    
    if subject_id is None:
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sample_id = dbu.register_user(full_name, gender, login, password, file_path, biometric_type, vector)
    else:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∏–æ–º–µ—Ç—Ä–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        sample_id = dbu.add_biometric_sample(subject_id, file_path, biometric_type)
    if not sample_id:
        print("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∏–æ–º–µ—Ç—Ä–∏–∏
    if save_func(sample_id, vector):
        print(f"{biometric_type.capitalize()} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    else:
        print(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {biometric_type}")
    
    update_index(
        config['samples_table'],
        config['vector_column'],
        config['index_file']
    )

def biometric_login(biometric_type, extract_func):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    :param biometric_type: '–ª–∏—Ü—É', '–≥–æ–ª–æ—Å—É', '–ø–æ–¥–ø–∏—Å–∏'
    :param extract_func: —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–∞
    """
    #clear_screen()
    print(f"=== –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ {biometric_type} ===\n")

    file_path = input_with_prompt(f"–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É ({biometric_type})")
    if not os.path.exists(file_path):
        print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
    if biometric_type == 'face' and not file_path.lower().endswith(('.jpg', '.jpeg', '.png')):
        print("–õ–∏—Ü–æ: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ‚Äî JPG, JPEG, PNG")
        return
    elif biometric_type == 'voice' and not file_path.lower().endswith(('.wav', '.ogg', '.mp3')):
        print("–ì–æ–ª–æ—Å: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ‚Äî WAV, OGG, MP3")
        return
    elif biometric_type == 'signature' and not file_path.lower().endswith(('.jpg', '.jpeg', '.png')):
        print("–ü–æ–¥–ø–∏—Å—å: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ‚Äî JPG, JPEG, PNG")
        return

    print("\n–û–±—Ä–∞–±–æ—Ç–∫–∞...")
    print(file_path)
    vector = extract_func(file_path)
    if not vector:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–µ–∫—Ç–æ—Ä –∏–∑ {biometric_type}")
        return
    print("–í–µ–∫—Ç–æ—Ä –∏–∑–≤–ª–µ—á—ë–Ω")
#/home/kostya/biometric_course_work/dataset/faces/Authorize/Ira2.jpg
    matches = dbu.recognize_biometric(vector, biometric_type)
    print(matches)
    if matches:
        print("–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:")
        for id, name, sim in matches:
            print(f" - {name} (—Å—Ö–æ–¥—Å—Ç–≤–æ: {1 - sim:.2f}%)")
        current_user_id = matches[0][0] 
        current_user_name = matches[0][1]
        user_menu(current_user_id, current_user_name)
    else:
        print("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ")

def user_menu(current_user_id, current_user_name):
    while True:
        clear_screen()
        print(f"\n=== –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {current_user_name} ===")
        print("1. –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å")
        print("2. –û–±–Ω–æ–≤–∏—Ç—å –±–∏–æ–º–µ—Ç—Ä–∏—é –ª–∏—Ü–∞")
        print("3. –û–±–Ω–æ–≤–∏—Ç—å –±–∏–æ–º–µ—Ç—Ä–∏—é –≥–æ–ª–æ—Å–∞")
        print("4. –û–±–Ω–æ–≤–∏—Ç—å –±–∏–æ–º–µ—Ç—Ä–∏—é –ø–æ–¥–ø–∏—Å–∏")
        print("5. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∏–ø –±–∏–æ–º–µ—Ç—Ä–∏–∏")
        print("6. –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-6): ").strip()
        
        if choice == '1':
            change_password(current_user_id)
        elif choice == '2':
            update_biometric('face', fu.extract_face_vector, current_user_id)
        elif choice == '3':
            update_biometric('voice', vu.extract_audio_vector, current_user_id)
        elif choice == '4':
            update_biometric('signature', su.extract_signature_vector, current_user_id)
        elif choice == '5':
            add_biometric(current_user_id)
        elif choice == '6':
            current_user_id = None
            current_user_name = None
            print("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.")
            return
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")

def update_biometric(bio_type, extract_func, current_user_id):
    config = BIOMETRIC_CONFIG[bio_type]
    file_path = input_with_prompt(f"–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –Ω–æ–≤–æ–º—É —Ñ–∞–π–ª—É ({bio_type})")
    print(f"current_user_id: {current_user_id}")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
    if not os.path.exists(file_path):
        print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    print("\n–û–±—Ä–∞–±–æ—Ç–∫–∞...")
    vector = extract_func(file_path)
    if not vector:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–µ–∫—Ç–æ—Ä –∏–∑ {bio_type}")
        return
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
    if dbu.update_biometric_vector(current_user_id, vector, file_path, bio_type):
        print(f"{bio_type.capitalize()} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
    else:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {bio_type}")
    
    update_index(
        config['samples_table'],
        config['vector_column'],
        config['index_file']
    )

def add_biometric(current_user_id):
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –±–∏–æ–º–µ—Ç—Ä–∏–∏:")
    print("1. –õ–∏—Ü–æ")
    print("2. –ì–æ–ª–æ—Å")
    print("3. –ü–æ–¥–ø–∏—Å—å")
    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø (1-3): ").strip()
    
    if choice == '1':
        register_biometric('face', fu.extract_face_vector, dbu.save_face_vector, 'camera', current_user_id)
        config = BIOMETRIC_CONFIG['face']
    elif choice == '2':
        register_biometric('voice', vu.extract_audio_vector, dbu.save_voice_vector, 'mic', current_user_id)
        config = BIOMETRIC_CONFIG['voice']
    elif choice == '3':
        register_biometric('signature', su.extract_signature_vector, dbu.save_signature_vector, 'signature_pad', current_user_id)
        config = BIOMETRIC_CONFIG['signature']
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    update_index(
        config['samples_table'],
        config['vector_column'],
        config['index_file']
    )

def change_password(current_user_id):
    current_pass = input_with_prompt("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å")
    if not dbu.check_current_password(current_user_id, current_pass):
        print("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å")
        return
    
    new_pass = input_with_prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å")
    confirm_pass = input_with_prompt("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å")
    
    if new_pass != confirm_pass:
        print("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        return
    
    if dbu.update_password(current_user_id, new_pass):
        print("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")
    else:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è")

#TODO: implement index search and abillity to update biometry after login
#TODO: add a simple registration and login with password

def main():
    while True:
        #clear_screen()
        print("–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        users = dbu.get_all_users_with_biometrics()
        
        if users:
            print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            for user in users:
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['full_name']} (ID: {user['subject_id']})")
                print(f"  –ü–æ–ª: {user['gender']}")
                print("   –ë–∏–æ–º–µ—Ç—Ä–∏—è:")
                
                if user['biometrics']:
                    for bio in user['biometrics']:
                        print(f"    –¢–∏–ø: {bio['sample_type']}, –§–∞–π–ª: {bio['file_path']}")
                        #if bio['sample_type'] == 'face':
                        #    print(f"      –í–µ–∫—Ç–æ—Ä –ª–∏—Ü–∞: {bio['feature_vector']}")
                        #elif bio['sample_type'] == 'voice':
                        #    print(f"      –¢–µ–∫—Å—Ç –≥–æ–ª–æ—Å–∞: {bio['voice_text']}")
                        #    print(f"      –í–µ–∫—Ç–æ—Ä –∞—É–¥–∏–æ: {bio['audio_vector']}")
                        #elif bio['sample_type'] == 'signature':
                        #    print(f"      –í–µ–∫—Ç–æ—Ä –ø–æ–¥–ø–∏—Å–∏: {bio['signature_vector']}")
                else:
                    print("    –ù–µ—Ç –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –æ–±—Ä–∞–∑—Ü–æ–≤")
                print("-" * 40)
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.(–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞)")
        print("=== –ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ ===\n")
        print("1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –ª–∏—Ü—É")
        print("2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –≥–æ–ª–æ—Å—É")
        print("3. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –ø–æ–¥–ø–∏—Å–∏")
        print("4. –í–æ–π—Ç–∏ –ø–æ –ª–∏—Ü—É")
        print("5. –í–æ–π—Ç–∏ –ø–æ –≥–æ–ª–æ—Å—É")
        print("6. –í–æ–π—Ç–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∏")
        print("7. –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤")
        print("8. –í—ã—Ö–æ–¥\n")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-8): ").strip()

        if choice == '1':
            register_biometric('face', fu.extract_face_vector, dbu.save_face_vector, 'camera')
        elif choice == '2':
            register_biometric('voice', vu.extract_audio_vector, dbu.save_voice_vector, 'mic')
        elif choice == '3':
            register_biometric('signature', su.extract_signature_vector, dbu.save_signature_vector, 'signature_pad')
        elif choice == '4':
            biometric_login('face', fu.extract_face_vector)
        elif choice == '5':
            biometric_login('voice', vu.extract_audio_vector)
        elif choice == '6':
            biometric_login('signature', su.extract_signature_vector)
        elif choice == '7':
            view_audit_logs()
        elif choice == '8':
            print("–í—ã—Ö–æ–¥...")
            break
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
    

 #/home/kostya/biometric_course_work/dataset/voices/Registration/Kostya.ogg
 #/home/kostya/biometric_course_work/dataset/voices/Authorization/Kostya_reg_3.ogg
 #/home/kostya/biometric_course_work/dataset/voices/Authorization/Ira_1.ogg
 #/home/kostya/biometric_course_work/dataset/voices/Authorization/Serega_auth.ogg

 #/home/kostya/biometric_course_work/dataset/faces/Registered/Kostya.png
 #/home/kostya/biometric_course_work/dataset/faces/Registered/Adil_reg.jpg

 #/home/kostya/biometric_course_work/dataset/faces/Authorize/Kostya3.jpg
 #/home/kostya/biometric_course_work/dataset/faces/Authorize/Kostya2.jpg
 #/home/kostya/biometric_course_work/dataset/faces/Authorize/Adil_auth.jpg

if __name__ == "__main__":
    main()
    

#/home/kostya/biometric_course_work/dataset/faces/Registered/Adil_reg.jpg

#/home/kostya/biometric_course_work/dataset/faces/Authorize/Adil_auth.jpg
