import os
from datetime import datetime
from utils import db_utils as dbu
from utils import log_utils as lu
from utils import voice_utils as vu
from utils import signature_utils as su
from utils import face_utils as fu

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def input_with_prompt(prompt):
    return input(f"{prompt}: ").strip()

def update_photo(name):
    clear_screen()
    print(f"=== –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –¥–ª—è {name} ===\n")
    
    new_image_path = input_with_prompt("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –Ω–æ–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é")
    if not os.path.exists(new_image_path):
        print("‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    subject_id = dbu.get_subject_by_name(name)
    if not subject_id:
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    sample_id = dbu.get_sample_id(subject_id)
    if not sample_id:
        print("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.")
        return

    print("\n–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ...")
    if dbu.update_face_vector(sample_id, new_image_path):
        print("‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.")


def view_audit_logs():
    clear_screen()
    print("=== –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ ===\n")
    
    print("1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ª–æ–≥–∏")
    print("2. –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∞–±–ª–∏—Ü–µ")
    print("3. –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    print("4. –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ CSV")
    print("5. –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("6. –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º")
    print("7. –ù–∞–∑–∞–¥\n")
    
    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-7): ").strip()

    if choice == '1':
        logs = lu.fetch_all_logs()
        print_logs(logs)
    elif choice == '2':
        table = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã: ")
        logs = lu.filter_logs_by_table(table)
        print_logs(logs)
    elif choice == '3':
        user = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
        logs = lu.filter_logs_by_user(user)
        print_logs(logs)
    elif choice == '4':
        logs = lu.fetch_all_logs()
        lu.export_logs_to_csv(logs)
    elif choice == '5':
        activity = lu.analyze_user_activity()
        print("\nüìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:")
        for user, count in activity:
            print(f"{user}: {count} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    elif choice == '6':
        changes = lu.analyze_table_changes()
        print("\nüìä –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º:")
        for table, count in changes:
            print(f"{table}: {count} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
    elif choice == '7':
        return
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")

def print_logs(logs):
    print("\nüìú –õ–æ–≥–∏:")
    for log in logs:
        print(f"ID: {log[0]}")
        print(f"–¢–∞–±–ª–∏—Ü–∞: {log[1]}")
        print(f"–û–ø–µ—Ä–∞—Ü–∏—è: {log[2]}")
        print(f"–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {log[3]}")
        print(f"–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {log[4]}")
        print(f"–î–∞—Ç–∞: {log[5]}")
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {log[6]}")
        print("-" * 50)

def register_biometric(biometric_type, extract_func, save_func, sensor_type='webcam'):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±–∏–æ–º–µ—Ç—Ä–∏–∏
    :param biometric_type: 'face', 'voice', 'signature'
    :param extract_func: —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, fu.get_face_vector)
    :param save_func: —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, dbu.save_face_vector)
    :param sensor_type: —Ç–∏–ø —Å–µ–Ω—Å–æ—Ä–∞ ('webcam', 'mic', 'signature_pad')
    """
    clear_screen()
    print(f"=== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ({biometric_type}) ===\n")

    full_name = input_with_prompt("–í–≤–µ–¥–∏—Ç–µ –∏–º—è")
    gender = input_with_prompt("–ü–æ–ª (M/F)").upper()
    birth_date = input_with_prompt("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (YYYY-MM-DD)")
    consent = input_with_prompt("–î–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö? (y/n)").lower() == 'y'
    file_path = input_with_prompt(f"–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É ({biometric_type})")

    if not os.path.exists(file_path):
        print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
    if biometric_type == 'face' and not file_path.lower().endswith(('.jpg', '.jpeg', '.png')):
        print("‚ùå –õ–∏—Ü–æ: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ‚Äî JPG, JPEG, PNG")
        return
    elif biometric_type == 'voice' and not file_path.lower().endswith(('.wav', '.ogg', '.mp3')):
        print("‚ùå –ì–æ–ª–æ—Å: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ‚Äî WAV, OGG, MP3")
        return
    elif biometric_type == 'signature' and not file_path.lower().endswith(('.jpg', '.jpeg', '.png')):
        print("‚ùå –ü–æ–¥–ø–∏—Å—å: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ‚Äî JPG, JPEG, PNG")
        return

    print("\n–û–±—Ä–∞–±–æ—Ç–∫–∞...")


    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞
    vector = extract_func(file_path)

    if vector is None or len(vector) == 0:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–µ–∫—Ç–æ—Ä –∏–∑ {biometric_type}")
        return
    print("–í–µ–∫—Ç–æ—Ä –∏–∑–≤–ª–µ—á—ë–Ω")
    #/home/kostya/biometric_course_work/dataset/faces/Authorize/Ira2.jpg
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    sample_id = dbu.register_user(full_name, gender, birth_date, consent, file_path, biometric_type)
    if not sample_id:
        print("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∏–æ–º–µ—Ç—Ä–∏–∏
    if save_func(sample_id, vector):
        print(f"‚úÖ {biometric_type.capitalize()} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {biometric_type}")

def biometric_login(biometric_type, extract_func, recognize_func):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    :param biometric_type: '–ª–∏—Ü—É', '–≥–æ–ª–æ—Å—É', '–ø–æ–¥–ø–∏—Å–∏'
    :param extract_func: —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–∞
    :param recognize_func: —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ –ë–î
    """
    clear_screen()
    print(f"=== –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ {biometric_type} ===\n")

    file_path = input_with_prompt(f"–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É ({biometric_type})")
    if not os.path.exists(file_path):
        print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
    if biometric_type == '–ª–∏—Ü—É' and not file_path.lower().endswith(('.jpg', '.jpeg', '.png')):
        print("‚ùå –õ–∏—Ü–æ: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ‚Äî JPG, JPEG, PNG")
        return
    elif biometric_type == '–≥–æ–ª–æ—Å—É' and not file_path.lower().endswith(('.wav', '.ogg', '.mp3')):
        print("‚ùå –ì–æ–ª–æ—Å: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ‚Äî WAV, OGG, MP3")
        return
    elif biometric_type == '–ø–æ–¥–ø–∏—Å–∏' and not file_path.lower().endswith(('.jpg', '.jpeg', '.png')):
        print("‚ùå –ü–æ–¥–ø–∏—Å—å: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã ‚Äî JPG, JPEG, PNG")
        return

    print("\n–û–±—Ä–∞–±–æ—Ç–∫–∞...")
    print(file_path)
    vector = extract_func(file_path)
    if not vector:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–µ–∫—Ç–æ—Ä –∏–∑ {biometric_type}")
        return
    print("–í–µ–∫—Ç–æ—Ä –∏–∑–≤–ª–µ—á—ë–Ω")
#/home/kostya/biometric_course_work/dataset/faces/Authorize/Ira2.jpg
    print('vectorized')
    matches = recognize_func(vector)
    if matches:
        print("‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:")
        for name, sim in matches:
            print(f" - {name} (—Å—Ö–æ–¥—Å—Ç–≤–æ: {1 - sim:.2f}%)")
    else:
        print("‚ùå –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ")


def main():
    
    while True:
        clear_screen()
        users = dbu.get_all_users_with_biometrics()
        
        if users:
            for user in users:
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['full_name']} (ID: {user['subject_id']})")
                print(f"  –ü–æ–ª: {user['gender']}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user['birth_date']}")
                print(f"  –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö: {'–î–∞' if user['consent'] else '–ù–µ—Ç'}")
                print("  –ë–∏–æ–º–µ—Ç—Ä–∏—è:")
                
                if user['biometrics']:
                    for bio in user['biometrics']:
                        print(f"    –¢–∏–ø: {bio['sample_type']}, –§–∞–π–ª: {bio['file_path']}")
                        if bio['sample_type'] == 'face':
                            print(f"      –í–µ–∫—Ç–æ—Ä –ª–∏—Ü–∞: {bio['feature_vector']}")
                        elif bio['sample_type'] == 'voice':
                            print(f"      –¢–µ–∫—Å—Ç –≥–æ–ª–æ—Å–∞: {bio['voice_text']}")
                            print(f"      –í–µ–∫—Ç–æ—Ä –∞—É–¥–∏–æ: {bio['audio_vector']}")
                        elif bio['sample_type'] == 'signature':
                            print(f"      –í–µ–∫—Ç–æ—Ä –ø–æ–¥–ø–∏—Å–∏: {bio['signature_vector']}")
                else:
                    print("    –ù–µ—Ç –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –æ–±—Ä–∞–∑—Ü–æ–≤")
                print("-" * 40)
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        print("=== –ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ ===\n")
        print("1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –ª–∏—Ü—É")
        print("2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –≥–æ–ª–æ—Å—É")
        print("3. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –ø–æ–¥–ø–∏—Å–∏")
        print("4. –í–æ–π—Ç–∏ –ø–æ –ª–∏—Ü—É")
        print("5. –í–æ–π—Ç–∏ –ø–æ –≥–æ–ª–æ—Å—É")
        print("6. –í–æ–π—Ç–∏ –ø–æ –ø–æ–¥–ø–∏—Å–∏")
        print("7. –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤")
        print("8. –í—ã—Ö–æ–¥\n")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-8): ").strip()

        if choice == '1':
            register_biometric('face', fu.get_face_vector, dbu.save_face_vector, 'webcam')
        elif choice == '2':
            register_biometric('voice', vu.extract_audio_vector, dbu.save_voice_vector, 'mic')
        elif choice == '3':
            register_biometric('signature', su.extract_signature_vector, dbu.save_signature_vector, 'signature_pad')
        elif choice == '4':
            biometric_login('–ª–∏—Ü—É', fu.get_face_vector, dbu.recognize_face)
        elif choice == '5':
            biometric_login('–≥–æ–ª–æ—Å—É', vu.extract_audio_vector, dbu.recognize_voice)
        elif choice == '6':
            biometric_login('–ø–æ–¥–ø–∏—Å–∏', su.extract_signature_vector, dbu.recognize_signature)
        elif choice == '7':
            view_audit_logs()
        elif choice == '8':
            print("–í—ã—Ö–æ–¥...")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
    

def register_face():
    register_biometric('face', fu.get_face_vector, dbu.save_face_vector, 'webcam')

def register_voice():
    register_biometric('voice', vu.extract_audio_vector, dbu.save_voice_vector, 'mic')

def register_signature():
    register_biometric('signature', su.extract_signature_vector, dbu.save_signature_vector, 'signature_pad')
 #/home/kostya/biometric_course_work/dataset/voices/Registration/Kostya.ogg
 #/home/kostya/biometric_course_work/dataset/voices/Authorization/Kostya_reg_3.ogg
 #/home/kostya/biometric_course_work/dataset/voices/Authorization/Ira_1.ogg
 #/home/kostya/biometric_course_work/dataset/voices/Authorization/Serega_auth.ogg

 #/home/kostya/biometric_course_work/dataset/faces/Registered/Kostya.png
 #/home/kostya/biometric_course_work/dataset/faces/Registered/Adil_reg.jpg

 #/home/kostya/biometric_course_work/dataset/faces/Authorize/Kostya3.jpg
 #/home/kostya/biometric_course_work/dataset/faces/Authorize/Kostya2.jpg
 #/home/kostya/biometric_course_work/dataset/faces/Authorize/Adil_auth.jpg

def login_face():
    biometric_login('–ª–∏—Ü—É', fu.get_face_vector, dbu.recognize_face)

def login_voice():
    biometric_login('–≥–æ–ª–æ—Å—É', vu.extract_audio_vector, dbu.recognize_voice)

def login_signature():
    biometric_login('–ø–æ–¥–ø–∏—Å–∏', su.extract_signature_vector, dbu.recognize_signature)

if __name__ == "__main__":
    main()
    

#/home/kostya/biometric_course_work/dataset/faces/Registered/Adil_reg.jpg

#/home/kostya/biometric_course_work/dataset/faces/Authorize/Adil_auth.jpg
